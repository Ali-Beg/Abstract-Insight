{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyObgxA4Dw+5KI+J4NuS6IPy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1 Introduction\n","\n","In this project, I am working on a sequential sentence classification task using medical research abstracts, specifically focusing on the **PubMed 200k RCT dataset**. This dataset contains about **200,000 abstracts** from randomized controlled trials (RCTs), with over **2.3 million sentences**. Each sentence is labeled with one of five categories: **background**, **objective**, **method**, **result**, or **conclusion**.\n","\n","While traditional sentence classification models often treat sentences individually, recent advances have shown that incorporating the **context** in which a sentence appears can significantly improve classification performance. For example, existing models based on **artificial neural networks (ANNs)** tend to classify sentences in isolation, without considering the relationship between consecutive sentences. However, **joint classification of sentences**—that is, classifying a sentence while taking into account the classification of the surrounding sentences—has been proven to enhance accuracy.\n","\n","In this project, I aim to implement a model inspired by the work presented in the paper _**\"Neural Networks for Joint Sentence Classification in Medical Paper Abstracts\"**_. This approach combines the power of traditional ANN models for sentence classification with the benefits of **structured prediction**, where the model takes into account the sequence of sentences in an abstract. By doing so, it leverages the relationships between sentences to make more accurate predictions."],"metadata":{"id":"LvhOw_dKofUK"}},{"cell_type":"markdown","source":["the papar i am replicating (the source of data set i am using is here: https://arxiv.org/abs/1710.06071)"],"metadata":{"id":"9nc9gXEGorWP"}},{"cell_type":"markdown","source":["## 2 DATA\n","the dataset is publick available here: https://github.com/Franck-Dernoncourt/pubmed-rct"],"metadata":{"id":"sO-73AW4orQ1"}},{"cell_type":"code","source":["# downloading dataset\n","!git clone https://github.com/Franck-Dernoncourt/pubmed-rct"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qTE0aIFZpDMH","executionInfo":{"status":"ok","timestamp":1726479489735,"user_tz":-330,"elapsed":17628,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"a167ae52-50c6-48aa-adf6-75da43372bf2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'pubmed-rct'...\n","remote: Enumerating objects: 39, done.\u001b[K\n","remote: Counting objects: 100% (14/14), done.\u001b[K\n","remote: Compressing objects: 100% (9/9), done.\u001b[K\n","remote: Total 39 (delta 8), reused 5 (delta 5), pack-reused 25 (from 1)\u001b[K\n","Receiving objects: 100% (39/39), 177.08 MiB | 12.54 MiB/s, done.\n","Resolving deltas: 100% (15/15), done.\n"]}]},{"cell_type":"code","source":["!ls pubmed-rct/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qG7cp0MNpOPl","executionInfo":{"status":"ok","timestamp":1726479489735,"user_tz":-330,"elapsed":22,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"e607b0b7-827c-4e68-c143-b5f4d42a7151"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PubMed_200k_RCT\t\t\t\t       PubMed_20k_RCT_numbers_replaced_with_at_sign\n","PubMed_200k_RCT_numbers_replaced_with_at_sign  README.md\n","PubMed_20k_RCT\n"]}]},{"cell_type":"code","source":["!ls pubmed-rct/PubMed_200k_RCT_numbers_replaced_with_at_sign/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mldj0s0Tpb25","executionInfo":{"status":"ok","timestamp":1726479489735,"user_tz":-330,"elapsed":17,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"2645797b-85b8-435b-aa88-8756090107ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dev.txt  test.txt  train.zip\n"]}]},{"cell_type":"code","source":["# here i got data is already train-test split.\n","# here i am going to do my experimentaion with 20K dataset where numbers are replaced by @\n","data_dir = \"/content/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/\""],"metadata":{"id":"SmGEqK1Vpbyr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","filenames = [data_dir + filename for filename in os.listdir(data_dir)]\n","filenames"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"okKNeEZpqhSA","executionInfo":{"status":"ok","timestamp":1726479489736,"user_tz":-330,"elapsed":15,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"a8ff0999-729b-4756-c96c-26a8df22b408"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['/content/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/dev.txt',\n"," '/content/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/train.txt',\n"," '/content/pubmed-rct/PubMed_20k_RCT_numbers_replaced_with_at_sign/test.txt']"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["## Data preprocessing\n","\n","now i have test data and now i have to understant it.\n","1. visualistions"],"metadata":{"id":"eBejbkYurPXO"}},{"cell_type":"code","source":["## reading the line of the documents\n","def get_lines(filename):\n","  \"\"\" Read file name and return the lines of the file as list. \"\"\"\n","\n","  with open(filename, \"r\") as f:\n","    lines = f.readlines()\n","  return lines"],"metadata":{"id":"Je_XskEPqucD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_lines = get_lines(data_dir + \"train.txt\")\n","train_lines[:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w4hD6smqrOel","executionInfo":{"status":"ok","timestamp":1726479489736,"user_tz":-330,"elapsed":12,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"56744c57-87f5-4eda-e055-812b3b43d330"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['###24293578\\n',\n"," 'OBJECTIVE\\tTo investigate the efficacy of @ weeks of daily low-dose oral prednisolone in improving pain , mobility , and systemic low-grade inflammation in the short term and whether the effect would be sustained at @ weeks in older adults with moderate to severe knee osteoarthritis ( OA ) .\\n',\n"," 'METHODS\\tA total of @ patients with primary knee OA were randomized @:@ ; @ received @ mg/day of prednisolone and @ received placebo for @ weeks .\\n',\n"," 'METHODS\\tOutcome measures included pain reduction and improvement in function scores and systemic inflammation markers .\\n',\n"," 'METHODS\\tPain was assessed using the visual analog pain scale ( @-@ mm ) .\\n',\n"," 'METHODS\\tSecondary outcome measures included the Western Ontario and McMaster Universities Osteoarthritis Index scores , patient global assessment ( PGA ) of the severity of knee OA , and @-min walk distance ( @MWD ) .\\n',\n"," 'METHODS\\tSerum levels of interleukin @ ( IL-@ ) , IL-@ , tumor necrosis factor ( TNF ) - , and high-sensitivity C-reactive protein ( hsCRP ) were measured .\\n',\n"," 'RESULTS\\tThere was a clinically relevant reduction in the intervention group compared to the placebo group for knee pain , physical function , PGA , and @MWD at @ weeks .\\n',\n"," 'RESULTS\\tThe mean difference between treatment arms ( @ % CI ) was @ ( @-@ @ ) , p < @ ; @ ( @-@ @ ) , p < @ ; @ ( @-@ @ ) , p < @ ; and @ ( @-@ @ ) , p < @ , respectively .\\n',\n"," 'RESULTS\\tFurther , there was a clinically relevant reduction in the serum levels of IL-@ , IL-@ , TNF - , and hsCRP at @ weeks in the intervention group when compared to the placebo group .\\n',\n"," 'RESULTS\\tThese differences remained significant at @ weeks .\\n',\n"," 'RESULTS\\tThe Outcome Measures in Rheumatology Clinical Trials-Osteoarthritis Research Society International responder rate was @ % in the intervention group and @ % in the placebo group ( p < @ ) .\\n',\n"," 'CONCLUSIONS\\tLow-dose oral prednisolone had both a short-term and a longer sustained effect resulting in less knee pain , better physical function , and attenuation of systemic inflammation in older patients with knee OA ( ClinicalTrials.gov identifier NCT@ ) .\\n',\n"," '\\n',\n"," '###24854809\\n',\n"," 'BACKGROUND\\tEmotional eating is associated with overeating and the development of obesity .\\n',\n"," 'BACKGROUND\\tYet , empirical evidence for individual ( trait ) differences in emotional eating and cognitive mechanisms that contribute to eating during sad mood remain equivocal .\\n',\n"," 'OBJECTIVE\\tThe aim of this study was to test if attention bias for food moderates the effect of self-reported emotional eating during sad mood ( vs neutral mood ) on actual food intake .\\n',\n"," 'OBJECTIVE\\tIt was expected that emotional eating is predictive of elevated attention for food and higher food intake after an experimentally induced sad mood and that attentional maintenance on food predicts food intake during a sad versus a neutral mood .\\n',\n"," 'METHODS\\tParticipants ( N = @ ) were randomly assigned to one of the two experimental mood induction conditions ( sad/neutral ) .\\n']"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["len(train_lines)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L9NrKh3msdXS","executionInfo":{"status":"ok","timestamp":1726479489737,"user_tz":-330,"elapsed":11,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"63c41470-9eae-4eb3-ada0-21e2cabb9c47"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["210040"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["#### I want my data to be in list of dictionaries\n","```\n","[\n","  {line_no :  ,\n","   'target':   ,\n","   'text':     ,\n","   'total_no_of_lines':    ,},\n","  {line_no :  ,\n","   'target':   ,\n","   'text':     ,\n","   'total_no_of_lines':    ,},\n","]\n","\n","```"],"metadata":{"id":"r3CBOylquCpx"}},{"cell_type":"code","source":["def preprocess_text_with_line_numbers(filename):\n","  \"\"\"Returns a list of dictionaries of abstract line data.\n","\n","  Takes in filename, reads its contents and sorts through each line,\n","  extracting things like the target label, the text of the sentence,\n","  how many sentences are in the current abstract and what sentence number\n","  the target line is.\n","\n","  Args:\n","      filename: a string of the target text file to read and extract line data\n","      from.\n","\n","  Returns:\n","      A list of dictionaries each containing a line from an abstract,\n","      the lines label, the lines position in the abstract and the total number\n","      of lines in the abstract where the line is from. For example:\n","\n","      [{\"target\": 'CONCLUSION',\n","        \"text\": The study couldn't have gone better, turns out people are kinder than you think\",\n","        \"line_number\": 8,\n","        \"total_lines\": 8}]\n","  \"\"\"\n","  input_lines = get_lines(filename) # get all lines from filename\n","  abstract_lines = \"\" # create an empty abstract\n","  abstract_samples = [] # create an empty list of abstracts\n","\n","  # Loop through each line in target file\n","  for line in input_lines:\n","    if line.startswith(\"###\"): # check to see if line is an ID line\n","      abstract_id = line\n","      abstract_lines = \"\" # reset abstract string\n","    elif line.isspace(): # check to see if line is a new line\n","      abstract_line_split = abstract_lines.splitlines() # split abstract into separate lines\n","\n","      # Iterate through each line in abstract and count them at the same time\n","      for abstract_line_number, abstract_line in enumerate(abstract_line_split):\n","        line_data = {} # create empty dict to store data from line\n","        target_text_split = abstract_line.split(\"\\t\") # split target label from text\n","        line_data[\"target\"] = target_text_split[0] # get target label\n","        line_data[\"text\"] = target_text_split[1].lower() # get target text and lower it\n","        line_data[\"line_number\"] = abstract_line_number # what number line does the line appear in the abstract?\n","        line_data[\"total_lines\"] = len(abstract_line_split) - 1 # how many total lines are in the abstract? (start from 0)\n","        abstract_samples.append(line_data) # add line data to abstract samples list\n","\n","    else: # if the above conditions aren't fulfilled, the line contains a labelled sentence\n","      abstract_lines += line\n","\n","  return abstract_samples"],"metadata":{"id":"3neY07E90UAe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%time\n","\n","train_samples = preprocess_text_with_line_numbers(data_dir + \"train.txt\")\n","test_samples = preprocess_text_with_line_numbers(data_dir + \"test.txt\")\n","val_samples = preprocess_text_with_line_numbers(data_dir + \"dev.txt\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LpnH1w8gt75L","executionInfo":{"status":"ok","timestamp":1726479490749,"user_tz":-330,"elapsed":1019,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"50526f80-ad6c-4657-e4cb-e3da37456b4b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 458 ms, sys: 102 ms, total: 560 ms\n","Wall time: 565 ms\n"]}]},{"cell_type":"code","source":["train_samples[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"37POZzdKzFT_","executionInfo":{"status":"ok","timestamp":1726479490749,"user_tz":-330,"elapsed":16,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"3bde8080-9fb6-4d53-e441-bb8327dd9e75"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'target': 'OBJECTIVE',\n","  'text': 'to investigate the efficacy of @ weeks of daily low-dose oral prednisolone in improving pain , mobility , and systemic low-grade inflammation in the short term and whether the effect would be sustained at @ weeks in older adults with moderate to severe knee osteoarthritis ( oa ) .',\n","  'line_number': 0,\n","  'total_lines': 11},\n"," {'target': 'METHODS',\n","  'text': 'a total of @ patients with primary knee oa were randomized @:@ ; @ received @ mg/day of prednisolone and @ received placebo for @ weeks .',\n","  'line_number': 1,\n","  'total_lines': 11},\n"," {'target': 'METHODS',\n","  'text': 'outcome measures included pain reduction and improvement in function scores and systemic inflammation markers .',\n","  'line_number': 2,\n","  'total_lines': 11},\n"," {'target': 'METHODS',\n","  'text': 'pain was assessed using the visual analog pain scale ( @-@ mm ) .',\n","  'line_number': 3,\n","  'total_lines': 11},\n"," {'target': 'METHODS',\n","  'text': 'secondary outcome measures included the western ontario and mcmaster universities osteoarthritis index scores , patient global assessment ( pga ) of the severity of knee oa , and @-min walk distance ( @mwd ) .',\n","  'line_number': 4,\n","  'total_lines': 11},\n"," {'target': 'METHODS',\n","  'text': 'serum levels of interleukin @ ( il-@ ) , il-@ , tumor necrosis factor ( tnf ) - , and high-sensitivity c-reactive protein ( hscrp ) were measured .',\n","  'line_number': 5,\n","  'total_lines': 11},\n"," {'target': 'RESULTS',\n","  'text': 'there was a clinically relevant reduction in the intervention group compared to the placebo group for knee pain , physical function , pga , and @mwd at @ weeks .',\n","  'line_number': 6,\n","  'total_lines': 11},\n"," {'target': 'RESULTS',\n","  'text': 'the mean difference between treatment arms ( @ % ci ) was @ ( @-@ @ ) , p < @ ; @ ( @-@ @ ) , p < @ ; @ ( @-@ @ ) , p < @ ; and @ ( @-@ @ ) , p < @ , respectively .',\n","  'line_number': 7,\n","  'total_lines': 11},\n"," {'target': 'RESULTS',\n","  'text': 'further , there was a clinically relevant reduction in the serum levels of il-@ , il-@ , tnf - , and hscrp at @ weeks in the intervention group when compared to the placebo group .',\n","  'line_number': 8,\n","  'total_lines': 11},\n"," {'target': 'RESULTS',\n","  'text': 'these differences remained significant at @ weeks .',\n","  'line_number': 9,\n","  'total_lines': 11}]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["## creating data frame\n","\n","import pandas as pd\n","\n","train_df = pd.DataFrame(train_samples)\n","test_df = pd.DataFrame(test_samples)\n","val_df = pd.DataFrame(val_samples)"],"metadata":{"id":"dUSmhCGE0Zis"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_df.head(18)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"VMcavCRu0nHp","executionInfo":{"status":"ok","timestamp":1726479490749,"user_tz":-330,"elapsed":14,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"a3654462-3709-49a0-8ddd-0e861ea03699"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         target                                               text  \\\n","0     OBJECTIVE  to investigate the efficacy of @ weeks of dail...   \n","1       METHODS  a total of @ patients with primary knee oa wer...   \n","2       METHODS  outcome measures included pain reduction and i...   \n","3       METHODS  pain was assessed using the visual analog pain...   \n","4       METHODS  secondary outcome measures included the wester...   \n","5       METHODS  serum levels of interleukin @ ( il-@ ) , il-@ ...   \n","6       RESULTS  there was a clinically relevant reduction in t...   \n","7       RESULTS  the mean difference between treatment arms ( @...   \n","8       RESULTS  further , there was a clinically relevant redu...   \n","9       RESULTS  these differences remained significant at @ we...   \n","10      RESULTS  the outcome measures in rheumatology clinical ...   \n","11  CONCLUSIONS  low-dose oral prednisolone had both a short-te...   \n","12   BACKGROUND  emotional eating is associated with overeating...   \n","13   BACKGROUND  yet , empirical evidence for individual ( trai...   \n","14    OBJECTIVE  the aim of this study was to test if attention...   \n","15    OBJECTIVE  it was expected that emotional eating is predi...   \n","16      METHODS  participants ( n = @ ) were randomly assigned ...   \n","17      METHODS  attentional biases for high caloric foods were...   \n","\n","    line_number  total_lines  \n","0             0           11  \n","1             1           11  \n","2             2           11  \n","3             3           11  \n","4             4           11  \n","5             5           11  \n","6             6           11  \n","7             7           11  \n","8             8           11  \n","9             9           11  \n","10           10           11  \n","11           11           11  \n","12            0           10  \n","13            1           10  \n","14            2           10  \n","15            3           10  \n","16            4           10  \n","17            5           10  "],"text/html":["\n","  <div id=\"df-1b22cf09-b35e-4c91-b5e0-1df4afdfd3a0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>text</th>\n","      <th>line_number</th>\n","      <th>total_lines</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>OBJECTIVE</td>\n","      <td>to investigate the efficacy of @ weeks of dail...</td>\n","      <td>0</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>METHODS</td>\n","      <td>a total of @ patients with primary knee oa wer...</td>\n","      <td>1</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>METHODS</td>\n","      <td>outcome measures included pain reduction and i...</td>\n","      <td>2</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>METHODS</td>\n","      <td>pain was assessed using the visual analog pain...</td>\n","      <td>3</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>METHODS</td>\n","      <td>secondary outcome measures included the wester...</td>\n","      <td>4</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>METHODS</td>\n","      <td>serum levels of interleukin @ ( il-@ ) , il-@ ...</td>\n","      <td>5</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>RESULTS</td>\n","      <td>there was a clinically relevant reduction in t...</td>\n","      <td>6</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>RESULTS</td>\n","      <td>the mean difference between treatment arms ( @...</td>\n","      <td>7</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>RESULTS</td>\n","      <td>further , there was a clinically relevant redu...</td>\n","      <td>8</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>RESULTS</td>\n","      <td>these differences remained significant at @ we...</td>\n","      <td>9</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>RESULTS</td>\n","      <td>the outcome measures in rheumatology clinical ...</td>\n","      <td>10</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>CONCLUSIONS</td>\n","      <td>low-dose oral prednisolone had both a short-te...</td>\n","      <td>11</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>BACKGROUND</td>\n","      <td>emotional eating is associated with overeating...</td>\n","      <td>0</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>BACKGROUND</td>\n","      <td>yet , empirical evidence for individual ( trai...</td>\n","      <td>1</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>OBJECTIVE</td>\n","      <td>the aim of this study was to test if attention...</td>\n","      <td>2</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>OBJECTIVE</td>\n","      <td>it was expected that emotional eating is predi...</td>\n","      <td>3</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>METHODS</td>\n","      <td>participants ( n = @ ) were randomly assigned ...</td>\n","      <td>4</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>METHODS</td>\n","      <td>attentional biases for high caloric foods were...</td>\n","      <td>5</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b22cf09-b35e-4c91-b5e0-1df4afdfd3a0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1b22cf09-b35e-4c91-b5e0-1df4afdfd3a0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1b22cf09-b35e-4c91-b5e0-1df4afdfd3a0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0b86eaae-25ba-4c90-b81e-3479ec7573ec\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b86eaae-25ba-4c90-b81e-3479ec7573ec')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0b86eaae-25ba-4c90-b81e-3479ec7573ec button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df"}},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["### Data Analysis"],"metadata":{"id":"AtM4U7Cf2jcy"}},{"cell_type":"code","source":["# Distribution of labels in training data\n","train_df.target.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"2Zi1RWjH2eUY","executionInfo":{"status":"ok","timestamp":1726479490750,"user_tz":-330,"elapsed":13,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"6fbbed51-3a42-4d0a-92c2-5e59abf44728"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["target\n","METHODS        59353\n","RESULTS        57953\n","CONCLUSIONS    27168\n","BACKGROUND     21727\n","OBJECTIVE      13839\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>METHODS</th>\n","      <td>59353</td>\n","    </tr>\n","    <tr>\n","      <th>RESULTS</th>\n","      <td>57953</td>\n","    </tr>\n","    <tr>\n","      <th>CONCLUSIONS</th>\n","      <td>27168</td>\n","    </tr>\n","    <tr>\n","      <th>BACKGROUND</th>\n","      <td>21727</td>\n","    </tr>\n","    <tr>\n","      <th>OBJECTIVE</th>\n","      <td>13839</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","sns.set(style=\"whitegrid\", context=\"talk\")\n","\n","plt.figure(figsize=(10, 6))\n","train_df.total_lines.plot.hist(\n","    bins=30,\n","    color='skyblue',\n","    edgecolor='black',\n","    alpha=0.7\n",")\n","\n","plt.title('Distribution of Total Lines in Abstracts', fontsize=16, fontweight='bold')\n","plt.xlabel('Total Lines', fontsize=14)\n","plt.ylabel('Frequency', fontsize=14)\n","\n","plt.xticks(fontsize=12)\n","plt.yticks(fontsize=12)\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":583},"id":"9VIGWroc31l5","executionInfo":{"status":"ok","timestamp":1726479492942,"user_tz":-330,"elapsed":2204,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"4f0c4e44-9c8c-483f-8e3d-7dde0fbd6111"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Get lists of sentences\n","\n","When we build our deep learning model, one of its main inputs will be a list of strings (the lines of an abstract).\n","\n","We can get these easily from our DataFrames by calling the `tolist()` method on our `\"text\"` columns."],"metadata":{"id":"HJ0fVzHb3ICq"}},{"cell_type":"code","source":["# Convert abstract text lines into lists\n","train_sentences = train_df[\"text\"].tolist()\n","val_sentences = val_df[\"text\"].tolist()\n","test_sentences = test_df[\"text\"].tolist()\n","len(train_sentences), len(val_sentences), len(test_sentences)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FU7XM0I23GXL","executionInfo":{"status":"ok","timestamp":1726479492943,"user_tz":-330,"elapsed":20,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"533f97ac-574a-4bfa-922e-9e34b76f6fc5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(180040, 30212, 30135)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# View first 10 lines of training sentences\n","train_sentences[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I7WZ4GUr3Phb","executionInfo":{"status":"ok","timestamp":1726479492943,"user_tz":-330,"elapsed":19,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"117fc4d4-928e-47d3-bdee-ce84cfc9d965"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['to investigate the efficacy of @ weeks of daily low-dose oral prednisolone in improving pain , mobility , and systemic low-grade inflammation in the short term and whether the effect would be sustained at @ weeks in older adults with moderate to severe knee osteoarthritis ( oa ) .',\n"," 'a total of @ patients with primary knee oa were randomized @:@ ; @ received @ mg/day of prednisolone and @ received placebo for @ weeks .',\n"," 'outcome measures included pain reduction and improvement in function scores and systemic inflammation markers .',\n"," 'pain was assessed using the visual analog pain scale ( @-@ mm ) .',\n"," 'secondary outcome measures included the western ontario and mcmaster universities osteoarthritis index scores , patient global assessment ( pga ) of the severity of knee oa , and @-min walk distance ( @mwd ) .',\n"," 'serum levels of interleukin @ ( il-@ ) , il-@ , tumor necrosis factor ( tnf ) - , and high-sensitivity c-reactive protein ( hscrp ) were measured .',\n"," 'there was a clinically relevant reduction in the intervention group compared to the placebo group for knee pain , physical function , pga , and @mwd at @ weeks .',\n"," 'the mean difference between treatment arms ( @ % ci ) was @ ( @-@ @ ) , p < @ ; @ ( @-@ @ ) , p < @ ; @ ( @-@ @ ) , p < @ ; and @ ( @-@ @ ) , p < @ , respectively .',\n"," 'further , there was a clinically relevant reduction in the serum levels of il-@ , il-@ , tnf - , and hscrp at @ weeks in the intervention group when compared to the placebo group .',\n"," 'these differences remained significant at @ weeks .']"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["### Now, converting our data in numerical representaional form"],"metadata":{"id":"9Sa15dSK4Qis"}},{"cell_type":"code","source":["# One hot encode labels\n","from sklearn.preprocessing import OneHotEncoder\n","one_hot_encoder = OneHotEncoder(sparse=False)\n","train_labels_one_hot = one_hot_encoder.fit_transform(train_df[\"target\"].to_numpy().reshape(-1, 1))\n","val_labels_one_hot = one_hot_encoder.transform(val_df[\"target\"].to_numpy().reshape(-1, 1))\n","test_labels_one_hot = one_hot_encoder.transform(test_df[\"target\"].to_numpy().reshape(-1, 1))\n","\n","# Check what training labels look like\n","train_labels_one_hot"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ws6pBf0v3UDI","executionInfo":{"status":"ok","timestamp":1726479492943,"user_tz":-330,"elapsed":14,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"35d58f4e-9a25-4a93-b522-51c22f0e74d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:975: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., 1., 0.],\n","       [0., 0., 1., 0., 0.],\n","       [0., 0., 1., 0., 0.],\n","       ...,\n","       [0., 0., 0., 0., 1.],\n","       [0., 1., 0., 0., 0.],\n","       [0., 1., 0., 0., 0.]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["label encoder label"],"metadata":{"id":"lUDIXG3C44Xs"}},{"cell_type":"code","source":["# Extract labels (\"target\" columns) and encode them into integers\n","from sklearn.preprocessing import LabelEncoder\n","label_encoder = LabelEncoder()\n","train_labels_encoded = label_encoder.fit_transform(train_df[\"target\"].to_numpy())\n","val_labels_encoded = label_encoder.transform(val_df[\"target\"].to_numpy())\n","test_labels_encoded = label_encoder.transform(test_df[\"target\"].to_numpy())\n","\n","# Check what training labels look like\n","train_labels_encoded"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XW1Ferj84edZ","executionInfo":{"status":"ok","timestamp":1726479492943,"user_tz":-330,"elapsed":11,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"b358c154-8b11-47eb-e402-09c6c4fe207a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 2, 2, ..., 4, 1, 1])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# Get class names and number of classes from LabelEncoder instance\n","num_classes = len(label_encoder.classes_)\n","class_names = label_encoder.classes_\n","num_classes, class_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t7qvmqVi40bt","executionInfo":{"status":"ok","timestamp":1726479492943,"user_tz":-330,"elapsed":9,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"755647c8-922c-456d-8b70-54fe8fc90838"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(5,\n"," array(['BACKGROUND', 'CONCLUSIONS', 'METHODS', 'OBJECTIVE', 'RESULTS'],\n","       dtype=object))"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# now, Till now i have processed the data Convert it into numeric form"],"metadata":{"id":"OLLS4DsX5Fm7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Modeling\n","\n","here i am going to create series of moedl to find the best out it."],"metadata":{"id":"BKO-433V5mT5"}},{"cell_type":"markdown","source":["## Model 0: Getting a baseline\n","\n","Our first model we'll be a TF-IDF Multinomial Naive Bayes as recommended by [Scikit-Learn's machine learning map](https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html).\n","\n","To build it, we'll create a Scikit-Learn `Pipeline` which uses the [`TfidfVectorizer`](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html) class to convert our abstract sentences to numbers using the TF-IDF (term frequency-inverse document frequecy) algorithm and then learns to classify our sentences using the [`MultinomialNB`](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html) aglorithm."],"metadata":{"id":"D2cn4VXh5961"}},{"cell_type":"code","source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.pipeline import Pipeline\n","\n","# Create a pipeline\n","model_0 = Pipeline([\n","  (\"tf-idf\", TfidfVectorizer()),\n","  (\"clf\", MultinomialNB())\n","])\n","\n","# Fit the pipeline to the training data\n","model_0.fit(X=train_sentences,\n","            y=train_labels_encoded);"],"metadata":{"id":"w3QpBIoq55-k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate baseline on validation dataset\n","model_0.score(X=val_sentences,\n","              y=val_labels_encoded)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JrAbV2006GZU","executionInfo":{"status":"ok","timestamp":1726479497844,"user_tz":-330,"elapsed":1045,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"60547b3f-5b6a-47b3-d0d7-467e77dff323"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7218323844829869"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Make predictions\n","baseline_preds = model_0.predict(val_sentences)\n","baseline_preds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qmke5Oc56K_d","executionInfo":{"status":"ok","timestamp":1726479499093,"user_tz":-330,"elapsed":1252,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"0243463c-23cf-4104-cf4a-005ba4b49f0a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([4, 1, 3, ..., 4, 4, 1])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","import matplotlib.pyplot as plt\n","\n","def evaluate_and_visualize(y_true, y_pred, average='weighted'):\n","    \"\"\"\n","    Calculate and visualize the accuracy, precision, recall, and F1-score of predictions.\n","\n","    Parameters:\n","    - y_true: List or array of true labels\n","    - y_pred: List or array of predicted labels\n","    - average: Type of averaging to be performed on the data ('weighted', 'micro', 'macro', or None)\n","    \"\"\"\n","    # Calculate metrics\n","    accuracy = accuracy_score(y_true, y_pred)\n","    precision = precision_score(y_true, y_pred, average=average)\n","    recall = recall_score(y_true, y_pred, average=average)\n","    f1 = f1_score(y_true, y_pred, average=average)\n","\n","    # Prepare results\n","    results = {\n","        'Accuracy': accuracy,\n","        'Precision': precision,\n","        'Recall': recall,\n","        'F1 Score': f1\n","    }\n","\n","    # Visualize results\n","    metrics = list(results.keys())\n","    scores = list(results.values())\n","\n","    plt.figure(figsize=(10, 6))\n","    plt.bar(metrics, scores, color=['blue', 'orange', 'green', 'red'])\n","\n","    plt.title('Model Evaluation Metrics', fontsize=16, fontweight='bold')\n","    plt.xlabel('Metrics', fontsize=14)\n","    plt.ylabel('Scores', fontsize=14)\n","    plt.ylim([0, 1])\n","\n","    plt.grid(axis='y', linestyle='--', alpha=0.7)\n","    plt.xticks(fontsize=12)\n","    plt.yticks(fontsize=12)\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","    return results\n"],"metadata":{"id":"jj27BKNA6PVU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Assuming y_true and y_pred are your true and predicted labels respectively\n","results = evaluate_and_visualize(val_labels_encoded, baseline_preds)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":583},"id":"w-3Pgz1h64Xk","executionInfo":{"status":"ok","timestamp":1726479499094,"user_tz":-330,"elapsed":8,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"9a0c6290-1298-4cad-84e4-24a971c2efd9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["## Now it's time to go for deeper sequence modeles\n","\n","## Vectorizatin and embedding layer\n","\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import layers\n"],"metadata":{"id":"uGfMcQ-e7QGh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# How long is each sentence on average?\n","sent_lens = [len(sentence.split()) for sentence in train_sentences]\n","avg_sent_len = np.mean(sent_lens)\n","avg_sent_len # return average sentence length (in tokens)"],"metadata":{"id":"rMX15PAh70a2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726479501603,"user_tz":-330,"elapsed":9,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"3cabfacd-805a-4b84-b808-d1b279f4ed9c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["26.338269273494777"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Set a beautiful Seaborn style\n","sns.set(style=\"whitegrid\", context=\"talk\")\n","\n","\n","plt.figure(figsize=(10, 6))\n","\n","# Plot the histogram with customization\n","plt.hist(sent_lens, bins=7, color='dodgerblue', edgecolor='black', alpha=0.7)\n","\n","# Add title and labels with larger fonts\n","plt.title('Distribution of Sentence Lengths', fontsize=16, fontweight='bold')\n","plt.xlabel('Sentence Length', fontsize=14)\n","plt.ylabel('Frequency', fontsize=14)\n","\n","# Customize ticks\n","plt.xticks(fontsize=12)\n","plt.yticks(fontsize=12)\n","\n","# Add grid for better visibility\n","plt.grid(True, linestyle='--', alpha=0.6)\n","\n","# Show the plot\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":583},"id":"f5kZNf12T6aQ","executionInfo":{"status":"ok","timestamp":1726479502932,"user_tz":-330,"elapsed":1335,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"72a21f0a-880e-4c9c-98e4-c82efe246a5f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# How long of a sentence covers 95% of the lengths?\n","output_seq_len = int(np.percentile(sent_lens, 95))\n","output_seq_len"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_VgrC55eUTXP","executionInfo":{"status":"ok","timestamp":1726479502932,"user_tz":-330,"elapsed":12,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"f9720b3a-a1e3-494a-dd7e-921456d40c9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["55"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Maximum sentence length in the training set\n","max(sent_lens)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UFhwEmCwVZz0","executionInfo":{"status":"ok","timestamp":1726479502932,"user_tz":-330,"elapsed":10,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"2b5bda99-f11e-4665-bb71-21d502c113f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["296"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","source":["It looks like 95% of the sentences in our training set have a length of 55 tokens or less.\n","\n","When we create our tokenization layer, we'll use this value to turn all of our sentences into the same length. Meaning sentences with a length below 55 get padded with zeros and sentences with a length above 55 get truncated (words after 55 get cut off).\n"],"metadata":{"id":"TwxFXoeDU8Tn"}},{"cell_type":"markdown","source":["### creating vectorizer layer\n","` which maps our text to number"],"metadata":{"id":"WFS5mYeHVgvw"}},{"cell_type":"markdown","source":["Section 3.2 of the PubMed 200k RCT paper states the vocabulary size of the PubMed 20k dataset as 68,000. So we'll use that as our max_tokens parameter."],"metadata":{"id":"LZ8wlA22W4zi"}},{"cell_type":"code","source":["# How many words are in our vocabulary? (taken from 3.2 in https://arxiv.org/pdf/1710.06071.pdf)\n","max_tokens = 68000"],"metadata":{"id":"m-6QSkONVQLj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create text vectorizer\n","from tensorflow.keras.layers import TextVectorization\n","text_vectorizer = TextVectorization(max_tokens=max_tokens,\n","                                    output_sequence_length=55)"],"metadata":{"id":"p2fEg8TEVQJE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" # now adapt test vectorizer to training sentances\n"," text_vectorizer.adapt(train_sentences)"],"metadata":{"id":"XuZULVD2VQFl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" # How many words in our training vocabulary?\n","rct_20k_text_vocab = text_vectorizer.get_vocabulary()\n","print(f\"Number of words in vocabulary: {len(rct_20k_text_vocab)}\"),\n","print(f\"Most common words in the vocabulary: {rct_20k_text_vocab[:5]}\")\n","print(f\"Least common words in the vocabulary: {rct_20k_text_vocab[-5:]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q8PsXeaaVQBC","executionInfo":{"status":"ok","timestamp":1726479505386,"user_tz":-330,"elapsed":10,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"cb58442c-369f-45b5-9cbb-24883304893b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of words in vocabulary: 64841\n","Most common words in the vocabulary: ['', '[UNK]', 'the', 'and', 'of']\n","Least common words in the vocabulary: ['aainduced', 'aaigroup', 'aachener', 'aachen', 'aaacp']\n"]}]},{"cell_type":"code","source":["# Get the config of our text vectorizer\n","text_vectorizer.get_config()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OJhaB65zVP9o","executionInfo":{"status":"ok","timestamp":1726479505386,"user_tz":-330,"elapsed":9,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"8df26eb5-e43e-4c6d-e0e9-10277766b3ce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'name': 'text_vectorization',\n"," 'trainable': True,\n"," 'dtype': {'module': 'keras',\n","  'class_name': 'DTypePolicy',\n","  'config': {'name': 'float32'},\n","  'registered_name': None},\n"," 'max_tokens': 68000,\n"," 'standardize': 'lower_and_strip_punctuation',\n"," 'split': 'whitespace',\n"," 'ngrams': None,\n"," 'output_mode': 'int',\n"," 'output_sequence_length': 55,\n"," 'pad_to_max_tokens': False,\n"," 'sparse': False,\n"," 'ragged': False,\n"," 'vocabulary': None,\n"," 'idf_weights': None,\n"," 'encoding': 'utf-8',\n"," 'vocabulary_size': 64841}"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","source":["### creating custom emmedding"],"metadata":{"id":"nyRJ8oKpYleU"}},{"cell_type":"code","source":["# Create token embedding layer\n","token_embed = layers.Embedding(input_dim=len(rct_20k_text_vocab), # length of vocabulary\n","                               output_dim=128, # Note: different embedding sizes result in drastically different numbers of parameters to train\n","                               # Use masking to handle variable sequence lengths (save space)\n","                               mask_zero=True,\n","                               name=\"token_embedding\")"],"metadata":{"id":"etJAIIzEVP33"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Test out text vectorizer\n","import random\n","target_sentence = random.choice(train_sentences)\n","print(f\"Text:\\n{target_sentence}\")\n","print(f\"\\nLength of text: {len(target_sentence.split())}\")\n","print(f\"\\nVectorized text:\\n{text_vectorizer([target_sentence])}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LhQcn5pCVP1H","executionInfo":{"status":"ok","timestamp":1726479507299,"user_tz":-330,"elapsed":1918,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"ca8f081a-4052-42e4-b1bd-dc3bd675e2ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Text:\n","bps may also protect against cvd .\n","\n","Length of text: 7\n","\n","Vectorized text:\n","[[11724    91   138  3681   644  1594     0     0     0     0     0     0\n","      0     0     0     0     0     0     0     0     0     0     0     0\n","      0     0     0     0     0     0     0     0     0     0     0     0\n","      0     0     0     0     0     0     0     0     0     0     0     0\n","      0     0     0     0     0     0     0]]\n"]}]},{"cell_type":"code","source":["# Show example embedding\n","print(f\"Sentence before vectorization:\\n{target_sentence}\\n\")\n","vectorized_sentence = text_vectorizer([target_sentence])\n","print(f\"Sentence after vectorization (before embedding):\\n{vectorized_sentence}\\n\")\n","embedded_sentence = token_embed(vectorized_sentence)\n","print(f\"Sentence after embedding:\\n{embedded_sentence}\\n\")\n","print(f\"Embedded sentence shape: {embedded_sentence.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sruy446-VPyd","executionInfo":{"status":"ok","timestamp":1726479507299,"user_tz":-330,"elapsed":20,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"ebb13f5b-1be8-45e4-c285-9c01d95dcc90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sentence before vectorization:\n","bps may also protect against cvd .\n","\n","Sentence after vectorization (before embedding):\n","[[11724    91   138  3681   644  1594     0     0     0     0     0     0\n","      0     0     0     0     0     0     0     0     0     0     0     0\n","      0     0     0     0     0     0     0     0     0     0     0     0\n","      0     0     0     0     0     0     0     0     0     0     0     0\n","      0     0     0     0     0     0     0]]\n","\n","Sentence after embedding:\n","[[[ 0.00219142  0.00373449  0.01549332 ...  0.04180853 -0.00561142\n","   -0.01557132]\n","  [-0.03580309  0.00124263 -0.00479086 ... -0.04466486 -0.0178378\n","   -0.01348913]\n","  [-0.02854412 -0.04613457 -0.02582955 ... -0.04035354 -0.03041509\n","    0.02337499]\n","  ...\n","  [-0.01463859 -0.04429579 -0.02587613 ... -0.03905489 -0.03175019\n","    0.02171801]\n","  [-0.01463859 -0.04429579 -0.02587613 ... -0.03905489 -0.03175019\n","    0.02171801]\n","  [-0.01463859 -0.04429579 -0.02587613 ... -0.03905489 -0.03175019\n","    0.02171801]]]\n","\n","Embedded sentence shape: (1, 55, 128)\n"]}]},{"cell_type":"code","source":["## craeting fast loading dataSet with tensorFlow tf.data\n","\n","# Turn our data into TensorFlow Datasets\n","train_dataset = tf.data.Dataset.from_tensor_slices((train_sentences, train_labels_one_hot))\n","valid_dataset = tf.data.Dataset.from_tensor_slices((val_sentences, val_labels_one_hot))\n","test_dataset = tf.data.Dataset.from_tensor_slices((test_sentences, test_labels_one_hot))\n","\n","train_dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ojHUgmenVPvA","executionInfo":{"status":"ok","timestamp":1726479507300,"user_tz":-330,"elapsed":19,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"24ff57db-2870-4a81-fbb1-cd4579dd116a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_TensorSliceDataset element_spec=(TensorSpec(shape=(), dtype=tf.string, name=None), TensorSpec(shape=(5,), dtype=tf.float64, name=None))>"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# Take the TensorSliceDataset's and turn them into prefetched batches\n","train_dataset = train_dataset.batch(32).prefetch(tf.data.AUTOTUNE)\n","valid_dataset = valid_dataset.batch(32).prefetch(tf.data.AUTOTUNE)\n","test_dataset = test_dataset.batch(32).prefetch(tf.data.AUTOTUNE)\n","\n","train_dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vyNfm27CZkuK","executionInfo":{"status":"ok","timestamp":1726479507300,"user_tz":-330,"elapsed":17,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"235178ab-8f12-46e8-a9b0-f0e649b275f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_PrefetchDataset element_spec=(TensorSpec(shape=(None,), dtype=tf.string, name=None), TensorSpec(shape=(None, 5), dtype=tf.float64, name=None))>"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","source":["## Model1 Conv1D with token emmbeddings"],"metadata":{"id":"pfHqhO_Ea09C"}},{"cell_type":"code","source":["# # Create 1D convolutional model to process sequences\n","# inputs = layers.Input(shape=(1,), dtype=tf.string)\n","# text_vectors = text_vectorizer(inputs) # vectorize text inputs\n","# token_embeddings = token_embed(text_vectors) # create embedding\n","# x = layers.Conv1D(64, kernel_size=5, padding=\"same\", activation=\"relu\")(token_embeddings)\n","# x = layers.GlobalAveragePooling1D()(x) # condense the output of our feature vector\n","# outputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n","# model_1 = tf.keras.Model(inputs, outputs)\n","\n","# # Compile\n","# model_1.compile(loss=\"categorical_crossentropy\", # if your labels are integer form (not one hot) use sparse_categorical_crossentropy\n","#                 optimizer=tf.keras.optimizers.Adam(),\n","#                 metrics=[\"accuracy\"])"],"metadata":{"id":"eqgY5CqTZkr2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Get summary of Conv1D model\n","# model_1.summary()"],"metadata":{"id":"aABc_gEzZkp7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create 1D convolutional model to process sequences\n","inputs = layers.Input(shape=(1,), dtype=tf.string)\n","text_vectors = text_vectorizer(inputs)  # vectorize text inputs\n","token_embeddings = token_embed(text_vectors)  # create embedding\n","\n","# First Conv1D layer\n","x = layers.Conv1D(64, kernel_size=5, padding=\"same\", activation=\"relu\")(token_embeddings)\n","\n","# Add another Conv1D layer\n","x = layers.Conv1D(128, kernel_size=3, padding=\"same\", activation=\"relu\")(x)\n","\n","# Global pooling layer to condense the output\n","x = layers.GlobalAveragePooling1D()(x)\n","\n","# Output layer\n","outputs = layers.Dense(num_classes, activation=\"softmax\")(x)\n","\n","# Define the model\n","model_1 = tf.keras.Model(inputs, outputs)\n","\n","# Compile the model\n","model_1.compile(loss=\"categorical_crossentropy\",  # if labels are integer form (not one-hot), use sparse_categorical_crossentropy\n","                optimizer=tf.keras.optimizers.Adam(),\n","                metrics=[\"accuracy\"])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s969MPccZknr","executionInfo":{"status":"ok","timestamp":1726479507301,"user_tz":-330,"elapsed":15,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"942d82d1-d7ca-4a03-9803-e6d0bec4bcb6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/layer.py:915: UserWarning: Layer 'conv1d' (of type Conv1D) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["model_1.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":400},"id":"liMnEigAZklE","executionInfo":{"status":"ok","timestamp":1726479507301,"user_tz":-330,"elapsed":13,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"60586d18-a90c-43e9-c0c9-8f94de048b77"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"functional\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ text_vectorization                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mTextVectorization\u001b[0m)                  │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ token_embedding (\u001b[38;5;33mEmbedding\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │       \u001b[38;5;34m8,299,648\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d (\u001b[38;5;33mConv1D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m64\u001b[0m)              │          \u001b[38;5;34m41,024\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d_1 (\u001b[38;5;33mConv1D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m55\u001b[0m, \u001b[38;5;34m128\u001b[0m)             │          \u001b[38;5;34m24,704\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_average_pooling1d             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)             │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)                   │             \u001b[38;5;34m645\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ text_vectorization                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TextVectorization</span>)                  │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ token_embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │       <span style=\"color: #00af00; text-decoration-color: #00af00\">8,299,648</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)              │          <span style=\"color: #00af00; text-decoration-color: #00af00\">41,024</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">55</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)             │          <span style=\"color: #00af00; text-decoration-color: #00af00\">24,704</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_average_pooling1d             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)             │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">645</span> │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m8,366,021\u001b[0m (31.91 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,366,021</span> (31.91 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m8,366,021\u001b[0m (31.91 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,366,021</span> (31.91 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"code","source":["# Fit the model\n","model_1_history = model_1.fit(train_dataset,\n","                              steps_per_epoch=int(0.1 * len(train_dataset)), # only fit on 10% of batches for faster training time\n","                              epochs=3,\n","                              validation_data=valid_dataset,\n","                              validation_steps=int(0.1 * len(valid_dataset))) # only validate on 10% of batches"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_p9ciClkZkiX","executionInfo":{"status":"ok","timestamp":1726479538292,"user_tz":-330,"elapsed":31002,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"406b97c6-6715-4fdf-b86c-2ce255787759"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","\u001b[1m562/562\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 10ms/step - accuracy: 0.5304 - loss: 1.1106 - val_accuracy: 0.7490 - val_loss: 0.6764\n","Epoch 2/3\n","\u001b[1m562/562\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 11ms/step - accuracy: 0.7440 - loss: 0.6779 - val_accuracy: 0.7507 - val_loss: 0.6433\n","Epoch 3/3\n","\u001b[1m562/562\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 9ms/step - accuracy: 0.7738 - loss: 0.6196 - val_accuracy: 0.7872 - val_loss: 0.5816\n"]}]},{"cell_type":"code","source":["# Make predictions (our model outputs prediction probabilities for each class)\n","model_1_pred_probs = model_1.predict(valid_dataset)\n","model_1_pred_probs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4hxA4nJFZkfu","executionInfo":{"status":"ok","timestamp":1726479541091,"user_tz":-330,"elapsed":2818,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"a0e5a437-bdd9-410f-9cdd-1989a0b19e57"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m945/945\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[5.2233458e-01, 1.2529616e-01, 9.8008662e-02, 2.4365294e-01,\n","        1.0707659e-02],\n","       [4.7331879e-01, 2.5465038e-01, 1.1262202e-02, 2.5542870e-01,\n","        5.3399829e-03],\n","       [1.1639743e-01, 1.1800426e-03, 5.0091965e-04, 8.8191879e-01,\n","        2.7028591e-06],\n","       ...,\n","       [1.1093027e-05, 1.6898861e-03, 1.4649007e-02, 1.0237871e-05,\n","        9.8363978e-01],\n","       [6.4974681e-02, 4.7438195e-01, 8.8711262e-02, 4.8794676e-02,\n","        3.2313746e-01],\n","       [1.1189867e-01, 8.2306737e-01, 1.5838597e-02, 2.2808928e-02,\n","        2.6386449e-02]], dtype=float32)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# Convert pred probs to classes\n","model_1_preds = tf.argmax(model_1_pred_probs, axis=1)\n","model_1_preds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VMfRK5tqZkc_","executionInfo":{"status":"ok","timestamp":1726479541092,"user_tz":-330,"elapsed":47,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"43ff3b32-e6d4-4a50-c8b8-eec9ab0ec0ac"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(30212,), dtype=int64, numpy=array([0, 0, 3, ..., 4, 1, 1])>"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["model_1_results = results = evaluate_and_visualize(val_labels_encoded, model_1_preds)\n","model_1_results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":657},"id":"z6ylj9ftZkXe","executionInfo":{"status":"ok","timestamp":1726479543158,"user_tz":-330,"elapsed":2107,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"d99e4a76-a505-45a6-b524-202003db9b26"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["{'Accuracy': 0.7879981464318814,\n"," 'Precision': 0.787261684745618,\n"," 'Recall': 0.7879981464318814,\n"," 'F1 Score': 0.7870002562793383}"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":["The addition of the second convolutional layer enables the model to learn more abstract features from the input sequence. The first layer captures more localized patterns, while the second layer learns higher-level patterns from the output of the first."],"metadata":{"id":"fp4Evdjddca9"}},{"cell_type":"markdown","source":["## Model 2 Feature extraction with pretrained token embeddings"],"metadata":{"id":"2eUIVSAXeHKl"}},{"cell_type":"markdown","source":["![TensorFlow Hub Universal Feature Encoder feature extractor model we're building](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/09-model-tf-hub-USE-to-dense-layer.png)\n","*The feature extractor model we're building using a pretrained embedding from TensorFlow Hub.*"],"metadata":{"id":"lZqREJLKebli"}},{"cell_type":"markdown","source":["To download the pretrained USE into a layer we can use in our model, we can use the [`hub.KerasLayer`](https://www.tensorflow.org/hub/api_docs/python/hub/KerasLayer) class."],"metadata":{"id":"LH77BoPSekwI"}},{"cell_type":"code","source":["# Download pretrained TensorFlow Hub USE\n","import tensorflow_hub as hub\n","tf_hub_embedding_layer = hub.KerasLayer(\"https://tfhub.dev/google/universal-sentence-encoder/4\",\n","                                        trainable=False,\n","                                        name=\"universal_sentence_encoder\")"],"metadata":{"id":"I1Qibur8ePxU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Test out the embedding on a random sentence\n","random_training_sentence = random.choice(train_sentences)\n","print(f\"Random training sentence:\\n{random_training_sentence}\\n\")\n","use_embedded_sentence = tf_hub_embedding_layer([random_training_sentence])\n","print(f\"Sentence after embedding:\\n{use_embedded_sentence[0][:30]} (truncated output)...\\n\")\n","print(f\"Length of sentence embedding:\\n{len(use_embedded_sentence[0])}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jZkGQA8IePrL","executionInfo":{"status":"ok","timestamp":1726479602991,"user_tz":-330,"elapsed":3197,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"979bf5f7-1b6b-486c-a43b-bbcde6b25cf0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Random training sentence:\n","encouragingly , other indices of rv function remain stable before fontan regardless of shunt type .\n","\n","Sentence after embedding:\n","[-0.03162785 -0.03006523 -0.03895193 -0.02265123  0.01258725 -0.05980169\n","  0.05688984 -0.01967186  0.05813503  0.08919267  0.04927523  0.03738246\n","  0.01636003  0.04539886  0.01100211  0.01273398 -0.04927541  0.00489179\n"," -0.01951369  0.08093423 -0.00319872  0.02871032  0.06397056  0.01964904\n","  0.05098724  0.03083386  0.08576398  0.06177398 -0.03285476  0.02828462] (truncated output)...\n","\n","Length of sentence embedding:\n","512\n"]}]},{"cell_type":"markdown","source":["## now building model with tensorflowHub"],"metadata":{"id":"ymlzHYRhe4i9"}},{"cell_type":"code","source":["# # Define feature extractor model using TF Hub layer\n","# inputs = layers.Input(shape=[], dtype=tf.string)\n","# pretrained_embedding = tf_hub_embedding_layer(inputs) # tokenize text and create embedding\n","# x = layers.Dense(128, activation=\"relu\")(pretrained_embedding) # add a fully connected layer on top of the embedding\n","# # Note: you could add more layers here if you wanted to\n","# outputs = layers.Dense(5, activation=\"softmax\")(x) # create the output layer\n","# model_2 = tf.keras.Model(inputs=inputs,\n","#                         outputs=outputs)\n","\n","# # Compile the model\n","# model_2.compile(loss=\"categorical_crossentropy\",\n","#                 optimizer=tf.keras.optimizers.Adam(),\n","#                 metrics=[\"accuracy\"])"],"metadata":{"id":"_y9nzKzpf9jc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# model_2.fit(train_dataset,\n","#             steps_per_epoch=int(0.1 * len(train_dataset)),\n","#             epochs=3,\n","#             validation_data=valid_dataset,\n","#             # validation_steps=int(0.1 * len(valid_dataset)))"],"metadata":{"id":"8uL_Q2dlpXOy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Evaluate on whole validation dataset\n","# model_2.evaluate(valid_dataset)"],"metadata":{"id":"yiH9Z2RzqAlJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Make predictions with feature extraction model\n","# model_2_pred_probs = model_2.predict(valid_dataset)\n","# model_2_pred_probs"],"metadata":{"id":"mOx0p4EgqHlT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Convert the predictions with feature extraction model to classes\n","# model_2_preds = tf.argmax(model_2_pred_probs, axis=1)\n","# # model_2_preds"],"metadata":{"id":"ZXf9JGq7qL8A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Calculate results from TF Hub pretrained embeddings results on validation set\n","# model_2_results = evaluate_and_visualize(y_true=val_labels_encoded,\n","#                                     y_pred=model_2_preds)\n","# model_2_results"],"metadata":{"id":"rtBkDzZuqQVd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Model 3: Conv1d with character emmbeding"],"metadata":{"id":"9ILiC-TIqtwZ"}},{"cell_type":"markdown","source":["### Creating a character-level tokenizer\n","\n","The [*Neural Networks for Joint Sentence Classification\n","in Medical Paper Abstracts*](https://arxiv.org/pdf/1612.05251.pdf) paper mentions their model uses a hybrid of token and character embeddings.\n","\n","We've built models with a custom token embedding and a pretrained token embedding, how about we build one using a character embedding?\n","\n","The difference between a character and token embedding is that the **character embedding** is created using sequences split into characters (e.g. `hello` -> [`h`, `e`, `l`, `l`, `o`]) where as a **token embedding** is created on sequences split into tokens."],"metadata":{"id":"sLVpO-5KqqRH"}},{"cell_type":"code","source":["def split_chars(text):\n","    \"\"\"Splits the text and returns its characters.\n","    \"\"\"\n","    return ' '.join(list(text))"],"metadata":{"id":"dNC5IzMzs77i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["split_chars(target_sentence)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"7aipvrT0s74E","executionInfo":{"status":"ok","timestamp":1726479602995,"user_tz":-330,"elapsed":14,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"2fc2852b-f088-4e1e-8ea5-2085db5dc6f8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'b p s   m a y   a l s o   p r o t e c t   a g a i n s t   c v d   .'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["train_chars = [split_chars(sentence) for sentence in train_sentences]\n","val_chars = [split_chars(sentence) for sentence in val_sentences]\n","test_chars = [split_chars(sentence) for sentence in test_sentences]\n","\n","train_chars[:5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hTKwwXIws7wg","executionInfo":{"status":"ok","timestamp":1726479605095,"user_tz":-330,"elapsed":2112,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"d868e963-0852-4324-d4b8-ff49755a6417"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['t o   i n v e s t i g a t e   t h e   e f f i c a c y   o f   @   w e e k s   o f   d a i l y   l o w - d o s e   o r a l   p r e d n i s o l o n e   i n   i m p r o v i n g   p a i n   ,   m o b i l i t y   ,   a n d   s y s t e m i c   l o w - g r a d e   i n f l a m m a t i o n   i n   t h e   s h o r t   t e r m   a n d   w h e t h e r   t h e   e f f e c t   w o u l d   b e   s u s t a i n e d   a t   @   w e e k s   i n   o l d e r   a d u l t s   w i t h   m o d e r a t e   t o   s e v e r e   k n e e   o s t e o a r t h r i t i s   (   o a   )   .',\n"," 'a   t o t a l   o f   @   p a t i e n t s   w i t h   p r i m a r y   k n e e   o a   w e r e   r a n d o m i z e d   @ : @   ;   @   r e c e i v e d   @   m g / d a y   o f   p r e d n i s o l o n e   a n d   @   r e c e i v e d   p l a c e b o   f o r   @   w e e k s   .',\n"," 'o u t c o m e   m e a s u r e s   i n c l u d e d   p a i n   r e d u c t i o n   a n d   i m p r o v e m e n t   i n   f u n c t i o n   s c o r e s   a n d   s y s t e m i c   i n f l a m m a t i o n   m a r k e r s   .',\n"," 'p a i n   w a s   a s s e s s e d   u s i n g   t h e   v i s u a l   a n a l o g   p a i n   s c a l e   (   @ - @   m m   )   .',\n"," 's e c o n d a r y   o u t c o m e   m e a s u r e s   i n c l u d e d   t h e   w e s t e r n   o n t a r i o   a n d   m c m a s t e r   u n i v e r s i t i e s   o s t e o a r t h r i t i s   i n d e x   s c o r e s   ,   p a t i e n t   g l o b a l   a s s e s s m e n t   (   p g a   )   o f   t h e   s e v e r i t y   o f   k n e e   o a   ,   a n d   @ - m i n   w a l k   d i s t a n c e   (   @ m w d   )   .']"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["# Get the average character length\n","char_lens = [len(sentence) for sentence in train_sentences]\n","mean_char_len = np.mean(char_lens)\n","mean_char_len"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gCn1Svy1s7sn","executionInfo":{"status":"ok","timestamp":1726479605095,"user_tz":-330,"elapsed":23,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"9f6444e0-177b-4bae-daa3-1ed4340b2fe1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["149.3662574983337"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["# Check the distribution of the sequence at a character-level\n","import matplotlib.pyplot as plt\n","\n","plt.hist(char_lens, bins=7)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":538},"id":"T_T1lDqYs7oz","executionInfo":{"status":"ok","timestamp":1726479605096,"user_tz":-330,"elapsed":21,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"872a2255-03fc-4053-af74-3a5e0709227e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([1.41175e+05, 3.71110e+04, 1.60000e+03, 1.27000e+02, 2.10000e+01,\n","        5.00000e+00, 1.00000e+00]),\n"," array([1.00000000e+00, 1.98857143e+02, 3.96714286e+02, 5.94571429e+02,\n","        7.92428571e+02, 9.90285714e+02, 1.18814286e+03, 1.38600000e+03]),\n"," <BarContainer object of 7 artists>)"]},"metadata":{},"execution_count":62},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Check the length of the 95th percentile of the sequences\n","output_seq_char_len =  int(np.percentile(char_lens, 95))\n","output_seq_char_len"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qitfkfYls7ka","executionInfo":{"status":"ok","timestamp":1726479605096,"user_tz":-330,"elapsed":15,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"15cc03df-0e93-4cff-a04c-e6a7a622df6e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["290"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["import string\n","\n","alphabet = string.ascii_lowercase + string.digits\n","alphabet"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"cLHFhi_Zs7gd","executionInfo":{"status":"ok","timestamp":1726479605097,"user_tz":-330,"elapsed":14,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"311451e1-11e9-46ae-b1d7-33db7b342028"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'abcdefghijklmnopqrstuvwxyz0123456789'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["NUM_CHAR_TOKENS = len(alphabet) + 2    # Add space and the <OOV> token\n","\n","char_vectorization_layer = layers.TextVectorization(\n","    max_tokens=NUM_CHAR_TOKENS,\n","    output_sequence_length=output_seq_char_len,\n","    name='char_vectorization_layer'\n",")"],"metadata":{"id":"d6LRQ9pBtVs_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["char_vectorization_layer.adapt(train_chars)"],"metadata":{"id":"V3pGpKxXtVc4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["char_vocab = char_vectorization_layer.get_vocabulary()\n","len(char_vocab), char_vocab[:5], char_vocab[-5:]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SxusbdDZtc7w","executionInfo":{"status":"ok","timestamp":1726479609272,"user_tz":-330,"elapsed":39,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"79026ee2-6c3d-4078-b59d-b5112988b57c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(28, ['', '[UNK]', 'e', 't', 'i'], ['k', 'x', 'z', 'q', 'j'])"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","source":["random_train_char = random.choice(train_chars)\n","print(f'Charified text (length={len(random_train_char.split())}):\\n\"{random_train_char}\"\\n')\n","\n","vectorized_chars = char_vectorization_layer([random_train_char])\n","print(f'Vectorized chars (length={len(vectorized_chars[0])}):\\n{vectorized_chars}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ls1MoxPktc3d","executionInfo":{"status":"ok","timestamp":1726479609272,"user_tz":-330,"elapsed":34,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"1f89941b-48b1-4cfa-e8d1-b85331ce5372"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Charified text (length=224):\n","\"t h e   f o l l o w i n g   w e r e   e x a m i n e d   b e f o r e   b i l a t e r a l   c a t a r a c t   s u r g e r y   a n d   @ m o n t h s   a f t e r   t h e   s u r g e r y   :   r e f r a c t i v e   e r r o r   ,   b i n o c u l a r   u n c o r r e c t e d   d i s t a n c e   v i s u a l   a c u i t y   (   u c d v a   )   ,   u n c o r r e c t e d   n e a r   v i s u a l   a c u i t y   (   u c n v a   )   ,   b e s t   c o r r e c t e d   v i s u a l   a c u i t y   (   b c v a   )   a n d   s t e r e o p s i s   .\"\n","\n","Vectorized chars (length=290):\n","[[ 3 13  2 17  7 12 12  7 20  4  6 18 20  2  8  2  2 24  5 15  4  6  2 10\n","  22  2 17  7  8  2 22  4 12  5  3  2  8  5 12 11  5  3  5  8  5 11  3  9\n","  16  8 18  2  8 19  5  6 10 15  7  6  3 13  9  5 17  3  2  8  3 13  2  9\n","  16  8 18  2  8 19  8  2 17  8  5 11  3  4 21  2  2  8  8  7  8 22  4  6\n","   7 11 16 12  5  8 16  6 11  7  8  8  2 11  3  2 10 10  4  9  3  5  6 11\n","   2 21  4  9 16  5 12  5 11 16  4  3 19 16 11 10 21  5 16  6 11  7  8  8\n","   2 11  3  2 10  6  2  5  8 21  4  9 16  5 12  5 11 16  4  3 19 16 11  6\n","  21  5 22  2  9  3 11  7  8  8  2 11  3  2 10 21  4  9 16  5 12  5 11 16\n","   4  3 19 22 11 21  5  5  6 10  9  3  2  8  2  7 14  9  4  9  0  0  0  0\n","   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","   0  0]]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"bJrbXHSxtcpS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HV2HS0kfs7cR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### buliding conv1d with character level emmbedding"],"metadata":{"id":"AwUTlgIzsely"}},{"cell_type":"code","source":["char_embed = layers.Embedding(\n","    input_dim=len(char_vocab),\n","    output_dim=25,    # Size of the character embeddings in the paper\n","    mask_zero=True,\n","    name='char_embed'\n",")"],"metadata":{"id":"w89rXPcLslpW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["char_embed_example = char_embed(vectorized_chars)\n","char_embed_example, char_embed_example.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dG77xXENslkt","executionInfo":{"status":"ok","timestamp":1726479609273,"user_tz":-330,"elapsed":32,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"96a06929-75d6-4c10-b56e-0b11ccd42fd5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(1, 290, 25), dtype=float32, numpy=\n"," array([[[ 0.04006202,  0.03202369,  0.01546005, ..., -0.00936371,\n","           0.01688678,  0.01119123],\n","         [-0.01293452, -0.01286236, -0.03880848, ..., -0.00618996,\n","           0.01550915, -0.00326425],\n","         [-0.01370357, -0.03304684,  0.01336182, ..., -0.02762188,\n","          -0.01223468,  0.03439422],\n","         ...,\n","         [ 0.0408018 , -0.03163254, -0.02785032, ..., -0.0319102 ,\n","          -0.02605847,  0.01367244],\n","         [ 0.0408018 , -0.03163254, -0.02785032, ..., -0.0319102 ,\n","          -0.02605847,  0.01367244],\n","         [ 0.0408018 , -0.03163254, -0.02785032, ..., -0.0319102 ,\n","          -0.02605847,  0.01367244]]], dtype=float32)>,\n"," TensorShape([1, 290, 25]))"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["inputs = layers.Input(shape=(1,), dtype='string', name='input_layer')\n","char_vectors = char_vectorization_layer(inputs)\n","char_embeddings = char_embed(char_vectors)\n","x = layers.Conv1D(64, kernel_size=5, padding='same', activation='relu')(char_embeddings)\n","x = layers.GlobalMaxPooling1D()(x)\n","outputs = layers.Dense(num_classes, activation='softmax', name='output_layer')(x)\n","\n","model_3 = tf.keras.Model(inputs, outputs, name='skimlit_model_3')\n","\n","model_3.compile(\n","    loss='categorical_crossentropy',\n","    optimizer=tf.keras.optimizers.Adam(),\n","    metrics=['accuracy']\n",")\n","\n","model_3.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"j7GoZO7qslgV","executionInfo":{"status":"ok","timestamp":1726479609275,"user_tz":-330,"elapsed":31,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"4da9e3c7-6781-4f39-e322-03417ebf9622"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/layer.py:915: UserWarning: Layer 'conv1d_2' (of type Conv1D) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"skimlit_model_3\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"skimlit_model_3\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ char_vectorization_layer             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m290\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mTextVectorization\u001b[0m)                  │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ char_embed (\u001b[38;5;33mEmbedding\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m290\u001b[0m, \u001b[38;5;34m25\u001b[0m)             │             \u001b[38;5;34m700\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d_2 (\u001b[38;5;33mConv1D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m290\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │           \u001b[38;5;34m8,064\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_max_pooling1d                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mGlobalMaxPooling1D\u001b[0m)                 │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ output_layer (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)                   │             \u001b[38;5;34m325\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ char_vectorization_layer             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">290</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TextVectorization</span>)                  │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ char_embed (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">290</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">700</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv1d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">290</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,064</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ global_max_pooling1d                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalMaxPooling1D</span>)                 │                             │                 │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ output_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">325</span> │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m9,089\u001b[0m (35.50 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,089</span> (35.50 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m9,089\u001b[0m (35.50 KB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">9,089</span> (35.50 KB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"code","source":["AUTOTUNE = tf.data.AUTOTUNE\n","# Create char-level datasets\n","train_char_dataset = tf.data.Dataset.from_tensor_slices((\n","    train_chars,\n","    train_labels_one_hot\n",")).batch(32).prefetch(AUTOTUNE)\n","\n","valid_char_dataset = tf.data.Dataset.from_tensor_slices((\n","    val_chars,\n","    val_labels_one_hot\n",")).batch(32).prefetch(AUTOTUNE)\n","\n","test_char_dataset = tf.data.Dataset.from_tensor_slices((\n","    test_chars,\n","    test_labels_one_hot\n",")).batch(32).prefetch(AUTOTUNE)\n","\n","train_char_dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lEsviKAvuF1G","executionInfo":{"status":"ok","timestamp":1726479609276,"user_tz":-330,"elapsed":18,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"5484856a-ae38-4b3d-b222-ed8930339965"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_PrefetchDataset element_spec=(TensorSpec(shape=(None,), dtype=tf.string, name=None), TensorSpec(shape=(None, 5), dtype=tf.float64, name=None))>"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["history_3 = model_3.fit(\n","    train_char_dataset,\n","    epochs=3,\n","    steps_per_epoch=int(0.1 * len(train_char_dataset)),\n","    validation_data=valid_char_dataset,\n","    validation_steps=int(0.1 * len(valid_char_dataset))\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OIGFkUv7slcm","executionInfo":{"status":"ok","timestamp":1726479620825,"user_tz":-330,"elapsed":11564,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"fe089ec6-df6e-463b-daef-cc6c6bb6d583"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","\u001b[1m562/562\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 6ms/step - accuracy: 0.4315 - loss: 1.3922 - val_accuracy: 0.5888 - val_loss: 1.0315\n","Epoch 2/3\n","\u001b[1m562/562\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.5952 - loss: 1.0238 - val_accuracy: 0.6330 - val_loss: 0.9378\n","Epoch 3/3\n","\u001b[1m562/562\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.6378 - loss: 0.9376 - val_accuracy: 0.6503 - val_loss: 0.8963\n"]}]},{"cell_type":"code","source":["model_3.evaluate(valid_char_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bzOeTtz1slZc","executionInfo":{"status":"ok","timestamp":1726479624160,"user_tz":-330,"elapsed":3437,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"275fe2a6-0186-4c78-8a3a-5278f2257562"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m945/945\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.6542 - loss: 0.8894\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.891852855682373, 0.6551370024681091]"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["model_3_pred_probs = model_3.predict(valid_char_dataset)\n","model_3_pred_probs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ih7yftgJslVi","executionInfo":{"status":"ok","timestamp":1726479626929,"user_tz":-330,"elapsed":2790,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"77f30819-5c31-443e-9d1e-8b624e47df4a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m945/945\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0.11425182, 0.2335399 , 0.08052403, 0.48304424, 0.08864007],\n","       [0.23008496, 0.48436096, 0.01855406, 0.21097544, 0.05602466],\n","       [0.10446685, 0.24600516, 0.15299019, 0.40923932, 0.08729858],\n","       ...,\n","       [0.03630392, 0.09430325, 0.19201909, 0.07696281, 0.60041094],\n","       [0.03499412, 0.24044684, 0.23476695, 0.04537265, 0.44441938],\n","       [0.3913996 , 0.39164034, 0.11525337, 0.0772742 , 0.02443251]],\n","      dtype=float32)"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["model_3_preds = tf.argmax(model_3_pred_probs, axis=1)\n","model_3_preds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hiNP1oSJslSD","executionInfo":{"status":"ok","timestamp":1726479626929,"user_tz":-330,"elapsed":6,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"c9330771-12e0-489b-bc85-38a5d16df4d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(30212,), dtype=int64, numpy=array([3, 1, 3, ..., 4, 4, 1])>"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["model_3_results = evaluate_and_visualize(\n","    y_true=val_labels_encoded,\n","    y_pred=model_3_preds\n",")\n","model_3_results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":657},"id":"nT1zwTAiuppa","executionInfo":{"status":"ok","timestamp":1726479627935,"user_tz":-330,"elapsed":1010,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"19ba6e3b-db64-4f9c-9cb6-54ee3d0c1fc2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["{'Accuracy': 0.6551370316430557,\n"," 'Precision': 0.6511174604744628,\n"," 'Recall': 0.6551370316430557,\n"," 'F1 Score': 0.6467346376102114}"]},"metadata":{},"execution_count":77}]},{"cell_type":"markdown","source":["## Model 4 pretrained token emmbedding + character emmbedding"],"metadata":{"id":"GgUyq7kHvM1i"}},{"cell_type":"code","source":["token_inputs = layers.Input(shape=[], dtype='string', name='token_input')\n","token_embeddings = use_embedding_layer(token_inputs)\n","token_outputs = layers.Dense(128, activation='relu', name='token_output')(token_embeddings)\n","token_model = tf.keras.Model(\n","    inputs=token_inputs,\n","    outputs=token_outputs,\n","    name='skimlit_token_model_4'\n",")\n","\n","char_inputs = layers.Input(shape=(1,), dtype='string', name='char_input')\n","char_vectors = char_vectorization_layer(char_inputs)\n","char_embeddings = char_embed(char_vectors)\n","char_bi_lstm = layers.Bidirectional(layers.LSTM(25))(char_embeddings)\n","char_model = tf.keras.Model(\n","    inputs=char_inputs,\n","    outputs=char_bi_lstm,\n","    name='skimlit_char_model_4'\n",")\n","\n","token_char_concat = layers.Concatenate(name='token_char_hybrid')([\n","    token_model.output,\n","    char_model.output\n","])\n","\n","combined_dropout = layers.Dropout(0.5)(token_char_concat)\n","combined_dense = layers.Dense(128, activation='relu')(combined_dropout)\n","final_dropout = layers.Dropout(0.5)(combined_dense)\n","output_layer = layers.Dense(num_classes, activation='softmax', name='output_layer')(final_dropout)\n","\n","model_4 = tf.keras.Model(\n","    inputs=[token_model.input, char_model.input],\n","    outputs=output_layer,\n","    name='skimlit_model_4'\n",")"],"metadata":{"id":"6HUe-9jGu1Ij","colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"status":"error","timestamp":1726479794307,"user_tz":-330,"elapsed":888,"user":{"displayName":"Qwerty Pedia","userId":"00031377519972575012"}},"outputId":"9ff2e48c-f09d-4f2b-a4a7-93cb873f57d8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'use_embedding_layer' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-79-e39c23714195>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtoken_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'string'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'token_input'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtoken_embeddings\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muse_embedding_layer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtoken_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtoken_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'token_output'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtoken_embeddings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m token_model = tf.keras.Model(\n\u001b[1;32m      5\u001b[0m     \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtoken_inputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'use_embedding_layer' is not defined"]}]},{"cell_type":"code","source":["model_4.summary()"],"metadata":{"id":"5EjammLAL8fH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zhSgzBf8MBXe"},"execution_count":null,"outputs":[]}]}